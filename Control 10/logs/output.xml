<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.12.0 on darwin)" generated="20231120 15:01:34.629" rpa="false" schemaversion="4">
<suite id="s1" name="Control 10" source="/Users/schuiko/Robot_tests/Control 10/Control_10.robot">
<test id="s1-t1" name="Test 1" line="12">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>dbConfigFile=dbconfig.txt</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20231120 15:01:34.661" level="INFO">Connecting using : pymysql.connect(db=demo_database, user=root, passwd=***, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20231120 15:01:34.654" endtime="20231120 15:01:34.667"/>
</kw>
<kw name="Select age">
<var>${result}</var>
<kw name="Query" library="DatabaseLibrary">
<var>${result}</var>
<arg>Select name, surname from demo1 where age &lt; 7 and salary &gt; 0;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20231120 15:01:34.668" level="INFO">Executing : Query  |  Select name, surname from demo1 where age &lt; 7 and salary &gt; 0; </msg>
<msg timestamp="20231120 15:01:34.668" level="INFO">${result} = (('Lion', 'Goodwin'),)</msg>
<status status="PASS" starttime="20231120 15:01:34.667" endtime="20231120 15:01:34.668"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 15:01:34.669" level="INFO">(('Lion', 'Goodwin'),)</msg>
<status status="PASS" starttime="20231120 15:01:34.668" endtime="20231120 15:01:34.669"/>
</kw>
<msg timestamp="20231120 15:01:34.669" level="INFO">${result} = (('Lion', 'Goodwin'),)</msg>
<status status="PASS" starttime="20231120 15:01:34.667" endtime="20231120 15:01:34.669"/>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<arg>${result}</arg>
<doc>Verifies that the given item is empty.</doc>
<msg timestamp="20231120 15:01:34.669" level="INFO">Length is 1</msg>
<msg timestamp="20231120 15:01:34.669" level="FAIL">'(('Lion', 'Goodwin'),)' should be empty.</msg>
<status status="FAIL" starttime="20231120 15:01:34.669" endtime="20231120 15:01:34.669"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.
By default it's not an error if there was no open database connection -
suitable for usage as a teardown.
However you can enforce it using the `error_if_no_connection` parameter.</doc>
<msg timestamp="20231120 15:01:34.670" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20231120 15:01:34.670" endtime="20231120 15:01:34.670"/>
</kw>
<status status="FAIL" starttime="20231120 15:01:34.654" endtime="20231120 15:01:34.670">'(('Lion', 'Goodwin'),)' should be empty.</status>
</test>
<test id="s1-t2" name="Test 2" line="18">
<kw name="Connect To Database" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>${DBname}</arg>
<arg>${DBuser}</arg>
<arg>${DBpass}</arg>
<arg>${DBhost}</arg>
<arg>${DBport}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20231120 15:01:34.671" level="INFO">Connecting using : pymysql.connect(db=demo_database, user=root, passwd=***, host=localhost, port=3306, charset=None) </msg>
<status status="PASS" starttime="20231120 15:01:34.671" endtime="20231120 15:01:34.673"/>
</kw>
<kw name="Delete All Rows From Table" library="DatabaseLibrary">
<arg>demo1</arg>
<doc>Delete all the rows within a given table. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20231120 15:01:34.674" level="INFO">Executing : Delete All Rows From Table  |  DELETE FROM demo1 </msg>
<status status="PASS" starttime="20231120 15:01:34.674" endtime="20231120 15:01:34.675"/>
</kw>
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>Select * from demo1;</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback. The default error message can be overridden with the `msg` argument.</doc>
<msg timestamp="20231120 15:01:34.676" level="INFO">Executing : Row Count Is 0  |  selectStatement</msg>
<msg timestamp="20231120 15:01:34.676" level="INFO">Executing : Row Count  |  Select * from demo1; </msg>
<status status="PASS" starttime="20231120 15:01:34.676" endtime="20231120 15:01:34.676"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.
By default it's not an error if there was no open database connection -
suitable for usage as a teardown.
However you can enforce it using the `error_if_no_connection` parameter.</doc>
<msg timestamp="20231120 15:01:34.676" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20231120 15:01:34.676" endtime="20231120 15:01:34.677"/>
</kw>
<status status="PASS" starttime="20231120 15:01:34.671" endtime="20231120 15:01:34.677"/>
</test>
<test id="s1-t3" name="Test 3" line="24">
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>pymysql</arg>
<arg>database='${DBname}', user='${DBuser}', password='${DBpass}', host='${DBhost}'</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_connect_string`
(parsed as a list of named arguments).</doc>
<msg timestamp="20231120 15:01:34.677" level="INFO">Executing : Connect To Database Using Custom Params : pymysql.connect(db_api_2.connect(database='demo_database', user='root', password=***, host='localhost')) </msg>
<status status="PASS" starttime="20231120 15:01:34.677" endtime="20231120 15:01:34.678"/>
</kw>
<kw name="Insert data">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<var>${result}</var>
<arg>./data_for_demo1.sql</arg>
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20231120 15:01:34.679" level="INFO">Executing : Execute SQL Script  |  ./data_for_demo1.sql </msg>
<msg timestamp="20231120 15:01:34.679" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (1, 'Jon', 'Do', 21, 10000)</msg>
<msg timestamp="20231120 15:01:34.679" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (2, 'Ivan', 'Smith', 24, 12000)</msg>
<msg timestamp="20231120 15:01:34.679" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (3, 'Marry', 'Popins', 17, 8000)</msg>
<msg timestamp="20231120 15:01:34.679" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (4, 'Sergio', 'Trulle', 95, 0)</msg>
<msg timestamp="20231120 15:01:34.679" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (5, 'Berta', 'Rassel', 34, 20000)</msg>
<msg timestamp="20231120 15:01:34.679" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (6, 'Trune', 'Urroro', 45, 30000)</msg>
<msg timestamp="20231120 15:01:34.680" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (7, 'Agneta', 'Bartovna', 60, 15000)</msg>
<msg timestamp="20231120 15:01:34.680" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (8, 'Violetta', 'White', 7, 0)</msg>
<msg timestamp="20231120 15:01:34.680" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (9, 'Lion', 'Goodwin', 2, 99999)</msg>
<msg timestamp="20231120 15:01:34.680" level="INFO">Executing statement from script file: INSERT INTO demo1 (id, name, surname, age, salary) VALUES (10, 'Karetto', 'Jovanny', 50, 50000)</msg>
<msg timestamp="20231120 15:01:34.681" level="INFO">${result} = None</msg>
<status status="PASS" starttime="20231120 15:01:34.678" endtime="20231120 15:01:34.681"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${result}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20231120 15:01:34.681" level="INFO">None</msg>
<status status="PASS" starttime="20231120 15:01:34.681" endtime="20231120 15:01:34.681"/>
</kw>
<status status="PASS" starttime="20231120 15:01:34.678" endtime="20231120 15:01:34.681"/>
</kw>
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>Select * from demo1;</arg>
<arg>10</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback. The default error message can be overridden with the `msg` argument.</doc>
<msg timestamp="20231120 15:01:34.681" level="INFO">Executing : Row Count Is Equal To X  |  Select * from demo1;  |  10</msg>
<msg timestamp="20231120 15:01:34.681" level="INFO">Executing : Row Count  |  Select * from demo1; </msg>
<status status="PASS" starttime="20231120 15:01:34.681" endtime="20231120 15:01:34.682"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.
By default it's not an error if there was no open database connection -
suitable for usage as a teardown.
However you can enforce it using the `error_if_no_connection` parameter.</doc>
<msg timestamp="20231120 15:01:34.682" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20231120 15:01:34.682" endtime="20231120 15:01:34.682"/>
</kw>
<status status="PASS" starttime="20231120 15:01:34.677" endtime="20231120 15:01:34.682"/>
</test>
<status status="FAIL" starttime="20231120 15:01:34.630" endtime="20231120 15:01:34.683"/>
</suite>
<statistics>
<total>
<stat pass="2" fail="1" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="2" fail="1" skip="0" id="s1" name="Control 10">Control 10</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
